---

- name: "create PostgreSQL password file"
  template:
    src: "pgpass.j2"
    dest: "/home/discourse/.pgpass"
    owner: "discourse"
    group: "discourse"
    mode: "0600"

- name: "set psql_host"
  when: discourse_db_host == ""
  set_fact:
    psql_host: ""

- name: "set psql_host"
  when: discourse_db_host != ""
  set_fact:
    psql_host: "-h {{ discourse_db_host }}"

# - name: "check if schema_migrations table exists"
#   command:
#     psql discourse {{ psql_host }} -c
#     "COPY ( SELECT EXISTS (
#     SELECT 1 FROM pg_tables WHERE tablename='schema_migrations'
#     ) ) TO STDOUT;"
#   always_run: True
#   ignore_errors: True
#   changed_when: False
#   become: yes
#   become_user: postgres
#   register: schema_migrations_exists
#
# - name: "check total number of executed migrations before"
#   when: >
#     schema_migrations_exists is defined
#     and schema_migrations_exists.stdout == "t"
#   command:
#     psql discourse {{ psql_host }} -c
#     "COPY (
#     SELECT COUNT(*) FROM schema_migrations
#     ) TO STDOUT;"
#   always_run: True
#   ignore_errors: True
#   changed_when: False
#   sudo_user: "discourse"
#   register: executed_migrations_before

# - name: "rake db:setup"
#   become: yes
#   command: "bundle exec rake db:setup"
#   args:
#     chdir: "/var/www/discourse"
#   environment:
#     RAILS_ENV: production
#   tags:
#    - "rake"

- name: "restart server"
  shell: sleep 2 && shutdown -r now
  become: yes
  async: 1
  poll: 0
  ignore_erros: true

- name: "rebooting..."
  pause: seconds=90

- name: "reconnect to server"
  local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=20
  become: no

- name: "reconnect to postgres"
  local_action: wait_for host={{ inventory_hostname }} port=5432 state=started delay=20
  become: no

- name: "create root user"
  postgresql_user:
    name: root
    password: "{{ postgres_password }}"
    role_attr_flags: CREATEDB,SUPERUSER
  register: created_root_dev
  changed_when: False

- name: "rake db development"
  become: true
  command: "bundle exec rake db:create db:migrate"
  args:
    chdir: "/var/www/discourse"
  tags:
    - "rake"
  register: rake_db_migrate_dev
  changed_when: False

- name: "rake db production"
  become: true
  command: "bundle exec rake db:migrate"
  args:
    chdir: "/var/www/discourse"
  environment:
    RAILS_ENV: production
  register: rake_db_migrate_prod
  changed_when: False

- name: "stdout from `rake db:migrate`"
  when: discourse_verbose
  debug:
    var: rake_db_migrate.stdout_lines
  changed_when: False

- name: "stderr from `rake db:migrate`"
  when: discourse_verbose
  debug:
    var: rake_db_migrate.stderr.split('\n')
  changed_when: False

- name: "check if any migrations were executed"
  command:
    psql discourse {{ psql_host }} -c
    "COPY (
    SELECT COUNT(*) FROM schema_migrations
    ) TO STDOUT;"
  sudo_user: "discourse"
  register: executed_migrations_after
  always_run: True
  ignore_errors: True
  changed_when: >
    schema_migrations_exists is not defined
    or ( executed_migrations_before is not defined )
    or ( executed_migrations_after is not defined )
    or ( schema_migrations_exists.stdout != "t" )
    or ( executed_migrations_after.stdout > executed_migrations_before.stdout )
  notify:
    - "reload discourse-unicorn"
